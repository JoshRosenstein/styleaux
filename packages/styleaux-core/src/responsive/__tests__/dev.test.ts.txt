// import {createResponsiveP, IResponsivePOptions} from '../'
// import {createResponsive} from '../'
// import {MarginTopProperty} from '@johanneslumpe/css-types'

// interface IColors {
//   red: string
//   blue: string
//   green: string
// }

// interface IBreakpoints {
//   small: string
//   medium: string
//   large: string
// }

// interface IMyTheme {
//   colors: IColors
//   breakpoints: IBreakpoints
// }

// const myTheme: IMyTheme = {
//   colors: {
//     red: '#f00',
//     green: '#0f0',
//     blue: '#00f',
//   },
//   breakpoints: {
//     small: '@media (min-width: 30em)',
//     medium: '@media (min-width: 40em)',
//     large: '@media (min-width: 50em)',
//   },
// }
// interface IColorProps {
//   textColor: Extract<keyof IColors, string>
// }

// const toMq = x => x
// const breakpoints = {sm: 1, md: 2, lg: 4}
// const getBreakpoints = props =>
//   (props && props.theme && props.theme['breakpoints']) || breakpoints
// const responsive = createResponsive(toMq, breakpoints)
// const responsiveP = createResponsiveP<{}, IBreakpoints>(
//   responsive,
//   getBreakpoints,
//   ({value}) => p => value,
//   {},
// )
// const colors = responsiveP<IColorProps, IMyTheme>({
//   // The css property this function should map to
//   cssProp: 'color',
//   // The property of the component's props to read from
//   prop: 'textColor',
//   // Optional: The property within the theme to map the `prop` value to
//   path: 'colors',
// })
// const t = colors({textColor: {small: 'blue'}})

// export interface IMarginTopProps<T> {
//   /**
//    * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.
//    *
//    * @see https://developer.mozilla.org/docs/Web/CSS/margin-top
//    */
//   marginTop: T
// }

// export const marginTop = <T = MarginTopProperty, Theme = never>({
//   path,
// }: Partial<IResponsivePOptions<IMarginTopProps<T>, Theme, {}>> = {}) =>
//   responsiveP<IMarginTopProps<T>, Theme>({
//     cssProp: 'marginTop',
//     prop: 'marginTop',
//     path,
//   })

// describe('Default Breakpoints as Object', () => {
//   describe('Values can be in Array', () => {
//     it('Works ', () => {
//       const a = marginTop({path: 'spacing'})({
//         marginTop: 'sm',
//         theme: {breakpoints: {sm: 2, md: 1, lg: 3}, spacing: {sm: 1}},
//       })

//       expect(a).toEqual({paddingTop: '1'})
//     })

//     it('Works Array ', () => {
//       const b = responsiveP({
//         cssProp: 'paddingTop',
//         defaultValue: '16px',
//       })({paddingTop: [1, 2]})
//       expect(b).toEqual({paddingTop: 1, '@media 1': {paddingTop: 2}})
//     })

//     it('Works Default Value ', () => {
//       const b = responsiveP({
//         cssProp: 'paddingTop',
//         defaultValue: '16px',
//       })({})
//       expect(b).toEqual({paddingTop: '16px'})
//     })
//   })

//   describe('Values can be in Object Form', () => {
//     it('Works ', () => {
//       const a = responsiveP({
//         cssProp: 'paddingTop',
//         defaultValue: '16px',
//       })({paddingTop: {default: '1'}})
//       expect(a).toEqual({paddingTop: '1'})
//     })

//     it('Works Array ', () => {
//       const b = responsiveP({
//         cssProp: 'paddingTop',
//         defaultValue: '16px',
//       })({paddingTop: {default: 1, sm: 2}})
//       expect(b).toEqual({paddingTop: 1, '@media 1': {paddingTop: 2}})
//     })

//     it('Works Default Value ', () => {
//       const b = responsiveP({
//         cssProp: 'paddingTop',
//         defaultValue: '16px',
//       })({a: 1})

//       expect(b).toEqual({paddingTop: '16px'})
//     })
//   })
// })
