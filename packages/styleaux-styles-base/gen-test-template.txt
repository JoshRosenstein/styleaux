import {
  IMedia,
  ITheme,
  IThemeWithoutBreakpoints,
  theme,
  themeWithoutBreakpoints,
  MQ
} from '../../../__testutils__/theme';
import {
toStyles
} from '../../../__testutils__/toStyles';

import { create__PROPERTY_NAME_PASCAL__ } from '../__PROPERTY_NAME__';

describe('__PROPERTY_NAME__', () => {
  it('should return a function', () => {
    const result = create__PROPERTY_NAME_PASCAL__();
    expect(toStyles(result)).toBeInstanceOf(Function);
  });

  it('should use `__PROPERTY_NAME__` as component and css prop', () => {
    const result = create__PROPERTY_NAME_PASCAL__()({ __PROPERTY_NAME__: 'inherit' });
    expect(toStyles(result)).toEqual({ __PROPERTY_NAME__: 'inherit' });
  });

  it('should allow using a custom value type', () => {
    const result = create__PROPERTY_NAME_PASCAL__<'a'>()({ __PROPERTY_NAME__: 'a' });
    expect(toStyles(result)).toEqual({ __PROPERTY_NAME__: 'a' });
  });

  it('should use an interface which marks `__PROPERTY_NAME__` as optional', () => {
    const result = create__PROPERTY_NAME_PASCAL__<'a'>()({});
    expect(result).toEqual([]);
  });

  it('should allow using a theme', () => {
    const result = create__PROPERTY_NAME_PASCAL__<'value',never,IThemeWithoutBreakpoints>({
      key: 'dummy',
    })({ __PROPERTY_NAME__: 'value', theme: themeWithoutBreakpoints });
    expect(toStyles(result)).toEqual({
      __PROPERTY_NAME__: themeWithoutBreakpoints.dummy.value,
    });
  });

  it('should allow using breakpoints', () => {
    const result = create__PROPERTY_NAME_PASCAL__<
      'a' | 'b' | 'c' | 'd',
      IMedia,
      ITheme

    >()({
      __PROPERTY_NAME__: {
        all: 'a',
        D: 'b',
        T: 'c',
        M: 'd',
      },
      theme,
    });
    expect(toStyles(result)).toEqual({
      __PROPERTY_NAME__: 'a',
      [MQ.D]: {
        __PROPERTY_NAME__: 'b',
      },
      [MQ.T]: {
        __PROPERTY_NAME__: 'c',
      },
      [MQ.M]: {
        __PROPERTY_NAME__: 'd',
      },
    });
  });
});
